@page "/game"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>Game</h3>

@if (!_hasJoined)
{
    <p>
        Enter your name to join the game:
    </p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Join"><span class="oi oi-chat" aria-hidden="true"></span> Join Game!</button>
}
else
{
    <div>
        <span aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
    </div>

    <h2>Connected users:</h2>
    <ul>
        @foreach (var user in _connectedUsers)
        {
            <li>@user</li>
        }
    </ul>
}

@code {
    private bool _hasJoined = false;
    private string _username;
    private string _message;
    private List<string> _connectedUsers = new List<string>();
    private HubConnection? hubConnection;
    private string _hubUrl;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<IEnumerable<string>>("UpdateConnectedUsers", (userList) =>
        {
            _connectedUsers = userList.ToList();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public async Task Join()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        try
        {
            _hasJoined = true;
            await Task.Delay(1);

            string baseUrl = Navigation.BaseUri;
            _hubUrl = baseUrl.TrimEnd('/') + "/gamehub";

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{_hubUrl}?username={_username}")
                .Build();

            hubConnection.On<IEnumerable<string>>("UpdateConnectedUsers", (userList) =>
            {
                _connectedUsers = userList.ToList();
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();

            await hubConnection.SendAsync("JoinGame", _username);
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _hasJoined = false;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

